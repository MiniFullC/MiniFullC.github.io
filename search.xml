<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>oh-my-zsh+zsh 强大的终端环境</title>
      <link href="/2018/03/14/oh-my-zsh-%E9%85%8D%E7%BD%AEzsh-%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83/"/>
      <content type="html"><![CDATA[<p>人生苦短，我用zsh.</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>zsh 是一个强大的 bash 替代，而 oh-my-zsh 是 zsh 的一键式配置工具，尤其是配合一些插件，功能强大，好用又便捷。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>我们看一下系统内置了几种shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat /etc/shells</span><br><span class="line">#</span><br><span class="line"># /etc/shells</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>我的电脑现在仅仅只有2种；<code>sh</code>和<code>bash</code>。</p></li></ul><blockquote><ol><li>当然如果你使用的是Mac，你会现多了一个zsh，也就是说OSX系统预装了zsh。<br></li><li>目前大部分的Linux和OSX系统默认使用bash；其实真正强大的shell是深藏不漏的zsh，史称<code>终极Shell</code>，但是由于配置过于复杂，很多人看了几分钟的zsh使用指南，什么都没说直接关了网页走了。直到有一天，oh-my-zsh被一个程序员做了出来，速成突然变成了可能。</li></ol></blockquote><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><ul><li><p>linux下终端运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh zsh-completions</span><br><span class="line">或</span><br><span class="line">sudo pacman -S zsh zsh-completions</span><br></pre></td></tr></table></figure></li><li><p>zsh-completions 包是用以增强zsh的补全功能。</p></li><li>mac系统下无需安装。</li></ul><h3 id="下载oh-my-zsh"><a href="#下载oh-my-zsh" class="headerlink" title="下载oh-my-zsh"></a>下载oh-my-zsh</h3><ul><li><p>weget安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure></li><li><p>执行后自动读取系统环境变量并自动进行zsh配置。</p></li></ul><blockquote><p>切换到zsh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/local/bin/zsh</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>zsh配置文件在用户当前目录下的<code>.zshrc</code>中，打开它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ～/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>我们可以修改这个参数来自定义主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure></li><li><p>robbyrussell 是主题名。&gt;可挑选你喜欢的主题。</p></li></ul><h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><blockquote><p>在<code>.zshrc</code>文件中加入插件的名字，即可启动插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=( [plugins...] )</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>cp：显示复制进度。</li><li>git：默认开启的插件，提供了大量 git 的alias。<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git。" target="_blank" rel="noopener">详情</a></li><li>extract:功能强大的解压插件，所有类型的文件解压一个命令<code>x</code>全搞定，再也不需要去记tar后面到底是哪几个参数了。</li><li>z：强大的目录自动跳转命令，会记忆你曾经进入过的目录，用模糊匹配快速进入你想要的目录。</li></ul><hr><h3 id="一些实用的，非自带插件"><a href="#一些实用的，非自带插件" class="headerlink" title="一些实用的，非自带插件"></a>一些实用的，非自带插件</h3><ul><li><code>zsh-syntax-highlighting</code>：高亮你的zsh命令，正确显示绿色，错误显示红色。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>zsh-autosuggestions</code>:自动匹配你历史的输入命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li><p>同样在<code>.zshrc</code> 文件中加入 <code>plugins=(... zsh-syntax-highlighting zsh-autosuggestions)</code></p></li><li>保存退出，并运行<code>source ./zshrc</code>，更新一下zsh，当然你也可以重新打开命令行，就可以享受zsh给你带来的便捷了。</li></ul><h2 id="设置命令别名，让输入更便捷"><a href="#设置命令别名，让输入更便捷" class="headerlink" title="设置命令别名，让输入更便捷"></a>设置命令别名，让输入更便捷</h2><ul><li><p>还是找到zsh的配置文件<code>.zshrc</code>，（～/.zshrc），添加命令别名：</p><blockquote><p>例如：<code>alias install=&quot;sudo apt-get install&quot;</code></p></blockquote></li><li><p>应用配置文件，使配置生效 <code>source ～/.zshrc</code></p></li><li><p>查看当前shell现有别名，终端下输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ alias</span><br></pre></td></tr></table></figure></li><li><p>其他推荐配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">alias cls=&apos;clear&apos;</span><br><span class="line">alias ll=&apos;ls -l&apos;</span><br><span class="line">alias la=&apos;ls -a&apos;</span><br><span class="line">alias vi=&apos;vim&apos;</span><br><span class="line">alias md=&apos;mkdir -p&apos;</span><br><span class="line">alias javac=&quot;javac -J-Dfile.encoding=utf8&quot;</span><br><span class="line">alias grep=&quot;grep --color=auto&quot;</span><br><span class="line">alias -s html=mate   # 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开</span><br><span class="line">alias -s rb=mate     # 在命令行直接输入 ruby 文件，会在 TextMate 中打开</span><br><span class="line">alias -s py=vi       # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span><br><span class="line">alias -s js=vi</span><br><span class="line">alias -s c=vi</span><br><span class="line">alias -s java=vi</span><br><span class="line">alias -s txt=vi</span><br><span class="line">alias -s gz=&apos;tar -xzvf&apos;</span><br><span class="line">alias -s tgz=&apos;tar -xzvf&apos;</span><br><span class="line">alias -s zip=&apos;unzip&apos;</span><br><span class="line">alias -s bz2=&apos;tar -xjvf&apos;</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考-鸣谢"><a href="#参考-鸣谢" class="headerlink" title="参考-鸣谢"></a>参考-鸣谢</h1><hr><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></li><li><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">http://macshuo.com/?p=676</a></li><li><a href="https://wiki.archlinux.org/index.php/Zsh" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Zsh</a></li><li><a href="https://xiaotaoist.github.io" target="_blank" rel="noopener">https://xiaotaoist.github.io</a></li><li><a href="http://blog.csdn.net/u012801337/article/details/47132501" target="_blank" rel="noopener">http://blog.csdn.net/u012801337/article/details/47132501</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拥抱Disqus</title>
      <link href="/2018/03/12/%E6%8B%A5%E6%8A%B1Disqus/"/>
      <content type="html"><![CDATA[<p>评论系统是互动不可缺少的一部分，沟通同样也是桥梁。为博客搭建一个可靠的评论系统，我选择了Disqus。</p><hr><h1 id="申请Disqus账号"><a href="#申请Disqus账号" class="headerlink" title="申请Disqus账号"></a>申请Disqus账号</h1><ul><li>点击<a href="https://disqus.com/" target="_blank" rel="noopener">这里</a>进入Disqus的官网，注册登录，这里可以选择Facebook、Twitter账号的快速登录，当然你同样可以使用邮箱注册登录。</li></ul><h2 id="配置Disqus"><a href="#配置Disqus" class="headerlink" title="配置Disqus"></a>配置Disqus</h2><ul><li>登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项。</li></ul><ol><li><p><code>Websit Name</code> 就是 short name 自己填写,这个在配置 Hexo 的时候需要用到。</p></li><li><p><code>Category</code> 选择种类，可以随便选<br></p></li><li><p><code>Language</code> 语言选 Chinese 或者 English <br></p></li><li><p>点击<code>Create Site</code> 等待界面跳转。<br></p></li><li><p>接下来在页面的左侧点击 Configure Disqus<br></p></li></ol><ul><li>在<code>Website URL</code> 那里填写自己的博客地址，Description 可以不写，然后点 <code>Complete Setup</code>，Disqus 基本的设置就完成了。</li></ul><h1 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h1><ul><li>在<strong>主题配置文件</strong>中，填写 <code>comment: use:</code>字段，值设置为 <code>disqus</code> 或 <code>disqus_click。</code></li></ul><blockquote><p>使用<code>Disqus_Click</code> 时，文章页面不会主动加载<code>Disqus</code> 评论，直到按下按钮。这项设置有助于改善浏览者的体验。</p></blockquote><ul><li>在 <code>comment: shortname:</code>填入你的 <code>Disqus shortname</code></li></ul><hr><ul><li>需要注意的是此处的 <code>shortname</code>不是你的登录的 id，是你的评论二级域名去掉 <code>.duoshuo.com</code> 或 <code>.disqus.com</code>部分.</li></ul><blockquote><p>例如：Disqus 域名 example.disqus.com</p></blockquote><p>则输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shortname: example</span><br></pre></td></tr></table></figure><hr><p>然后执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><hr><ul><li><a href="https://www.jianshu.com/p/c4f65ebe23ad" target="_blank" rel="noopener">https://www.jianshu.com/p/c4f65ebe23ad</a></li><li><a href="https://material.viosey.com/docs/#/" target="_blank" rel="noopener">https://material.viosey.com/docs/#/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为Hexo优化</title>
      <link href="/2018/03/08/%E4%B8%BAHexo%E4%BC%98%E5%8C%96/"/>
      <content type="html"><![CDATA[<p>搭建完基本的框架，来为自己博客的美观和便捷性，做点功课。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>在本文中，假定你已经成功安装了 Hexo，并根据 Hexo 的文档创建了一个站点，并完成了基本的设置。</p></blockquote><ul><li>在 Hexo 中，通常有两份配置文件，一个是站点根目录下的 <code>_config.yaml</code>；另外一个是主题目录下的<code>_config.yaml</code>。 为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</li></ul><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><ul><li>在Hexo框架下更换主题变得异常简单，只要将主题文件下载并且放置到<strong>站点目录</strong>的<code>themes</code>文件夹下，然后修改一下配置文件即可。你可以从Github上找到这些<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">主题</a>。</li></ul><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><ul><li>克隆完成后，修改主题文件夹名称，将其自定义为 <code>***</code>。 然后打开 站点配置文件，找到 <code>theme</code>字段，并将其值更改为 <code>***</code> 。</li></ul><blockquote><p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code>字段与之对应即可。</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><hr><ul><li>为防止造成冲突，主题以<code>_config.template.yaml</code>文件取代<code>_config.yaml</code>文件，用以参考配置。 需要手动将 <code>material</code> 文件夹中的 <code>_config.template.yaml</code>复制一份并重命名为<code>_config.yaml</code>。</li></ul><hr><h2 id="主题基本配置"><a href="#主题基本配置" class="headerlink" title="主题基本配置"></a>主题基本配置</h2><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><ul><li>编辑 <strong>站点配置文件</strong>，将 <code>language</code>设置成你所需要的语言。</li></ul><blockquote><p>例如：选用简体中文，则配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h2><p> <strong>用于配置生成的 HTML 文件的头部信息。</strong></p><ul><li><code>favicon</code>: 网站的 favicon</li><li><code>high_res_favicon</code>: 高清 favicon</li><li><code>keywords</code>: 网站关键词</li><li><code>site_verification</code>: 搜索引擎验证</li></ul><h1 id="更方便的与Github关联"><a href="#更方便的与Github关联" class="headerlink" title="更方便的与Github关联"></a>更方便的与Github关联</h1><ul><li>使用 ssh实现与github的免密上传。</li></ul><hr><h2 id="生成ssh的密钥文件"><a href="#生成ssh的密钥文件" class="headerlink" title="生成ssh的密钥文件"></a>生成ssh的密钥文件</h2><p>在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa -b 256 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></p><ul><li>这行命令将会生成一个以<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>为标签的ssh key，接着bash会显示：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><ul><li>如果想要为私钥设置密码，请设置密码，如果不想设置则直接回车然后出现：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><ul><li>再次确认你的密码，或两次回车设置为空</li></ul><blockquote><p>ssh-keygen 有如几种参数： <br>1. -t 为指定加密算法类型，支持rsa，dsa，ecdsa。<br>2. -b 指定密钥大小。<br>3. -f 指定生成密钥保存位置与名称。 <br>4. -C 添加注释。默认为本机主机名和用户。</p></blockquote><h2 id="将ssh-Key-添加到github上"><a href="#将ssh-Key-添加到github上" class="headerlink" title="将ssh Key 添加到github上"></a>将ssh Key 添加到github上</h2><ol><li>将本地生成的公钥 <code>id_rsa.pub</code>中的内容复制下来。<br>2.打开<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>  并且登录，点击Add ssh Key，将复制的内容粘贴到Key框中，在Title框中可以输入自己方便记忆的名字。</li><li><p>当网页显示添加成功后，打开命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ‐T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>命令行出现以下回执：<code>Are you sure you want to continue connecting (yes/no)?</code></p></li><li><p>输入yes后如果看到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li><li><p>成功显示如上文字就说明成功了，如果出现错误提示请仔细检查自己的操作。</p></li></ol><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li><p>修改<strong>站点配置文件</strong>，中的<code>_config.yml</code>，将部署方式从https方式修改为ssh方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/minifullc/minifullc.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>修改为:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:MiniFullC/MiniFullC.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>  <br></p><p>  参考</p><hr><ul><li><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands.html</a></li><li><a href="https://xiaotaoist.github.io/" target="_blank" rel="noopener">https://xiaotaoist.github.io/</a></li><li><a href="https://material.viosey.com/docs/#/" target="_blank" rel="noopener">https://material.viosey.com/docs/#/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用Hexo+Github 搭建博客</title>
      <link href="/2018/03/07/Hexo+Github%20%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <content type="html"><![CDATA[<p>万事开头难，第一次总是让人既困惑又欣喜。踏出第一步，远比空想有意义的多。</p><h1 id="始建之初"><a href="#始建之初" class="headerlink" title="始建之初"></a>始建之初</h1><hr><p>搭建博客的想法来自于一个朋友的鼓舞，谨以本文来记念这次“美好的旅程”。本人利用Github+Hexo来搭建了这个博客，在此过程中无论是环境搭建还是功能配置都占据了我不少的时间，踩中了不少坑，希望本文能做个好的开始，并记录下中过程中遇到的相关问题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>下载node.js，npm 并安装。</li><li>下载git。</li></ul><ol><li><p>在Ubuntu下可以打开终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs npm git</span><br></pre></td></tr></table></figure></li><li><p>使用Arch Linux用户可以输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pacman -S nodejs npm git</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"> </span><br><span class="line">sudo yaourt -S node js npm git`</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Windows 用户可自行搜索安装。</p></blockquote><h2 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h2><ul><li>在终端下，输入 <em>node -v</em> ， <em>npm -v</em> ，<em>git –version</em></li><li>如果都成功显示版本号，则说明安装正确，可以进行下一步操作了，如果不正确，请回头检查安装过程。</li></ul><h2 id="在本地搭建hexo博客"><a href="#在本地搭建hexo博客" class="headerlink" title="在本地搭建hexo博客"></a>在本地搭建hexo博客</h2><ul><li>新建一个文件夹，自定义文件夹的名称，如 Blog。</li><li><p>在命令行中 输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>回车后会出现<code>WARN</code>，不用担心不会影响使用。</p></li><li>接下在你就会看到命令行窗口刷下了一大堆白字，下面我们来看一看Hexo是不是已经安装成功了。在命令行中输入：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><ul><li>如果成功显示Hexo的版本信息并且识别成功了你的本地计算机配置，则说明已经安装成功了。</li></ul><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><ul><li>成功安装Hexo后，进入刚才新建的文件夹 Blog，在命令行中输入：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>紧接着输入：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>之后npm将自动安装所需要的组件，这需要点时间，耐心等一会哦。</li><li>当组件安装完成后，连续输入两行指令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>然后会提示一行指令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><ul><li>在浏览器中打开这个链接：<code>http://localhost:4000/</code>，成功显示Hexo的默认模板。</li><li>到目前为止，Hexo在本地的配置已经全都结束了。</li></ul><hr><h2 id="将本地博客与Github关联"><a href="#将本地博客与Github关联" class="headerlink" title="将本地博客与Github关联"></a>将本地博客与Github关联</h2><ul><li>在Github上创建名字为xxx.github.io的项目，XXX是自己GIthub的用户名。</li><li>打开本地的Blog文件夹内的<em>_config.yml</em> 配置文件，将其中的type设置为git，并且在<em>repository：</em> 后写上自己Github的项目地址。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: https://github.com/MiniFullC/MiniFullC.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><ul><li>保存后运行：<em>npm install hexo-deployer-git –save</em></li><li>运行：<em>hexo g</em> （生成本地静态文件）</li><li>运行：<em>hexo d</em> （将本地静态文件推送到Github上）</li><li>此时hexo将会自动将本地的文件向github提交请求，接下来就会让你输入你github上的帐号和密码，输入正确后就会开始同步。</li></ul><h2 id="查看自己的博客"><a href="#查看自己的博客" class="headerlink" title="查看自己的博客"></a>查看自己的博客</h2><ul><li>上面你已经在github上按照规范输入了博客地址，<code>xxx.github.io</code>，这就是你的主页啦，基本的配置和上传已经成功了，接下来就来写一篇自己的博文吧！</li></ul><hr><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><ul><li>打开Hexo目录，找到<code>source</code>文件夹，所有的文章都会以Markdown形式保存在<code>_post</code>文件夹中。</li><li>好了知道了文章的存储地点那么如何快速的新建一个文章呢？</li><li>在Hexo站点目录下右键打开命令行，输入 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new “***”</span><br></pre></td></tr></table></figure><ul><li>***是你自定义文章的名字我们发现站点根目录下的<code>source</code>文件夹中的 <code>_post</code> 文件夹中多了一个<code>XXX.md</code>的文件，使用Markdown编辑器打开</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello-world   //在此处添加你的标题。</span><br><span class="line">date: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。</span><br><span class="line">categories: Exercise   //在此处输入这篇文章的分类。</span><br><span class="line">toc: true  </span><br><span class="line">---</span><br><span class="line">//在此处输入这篇文章的内容。</span><br></pre></td></tr></table></figure><ul><li>保存后，运行命令<code>hexo g</code>就可以进行渲染了。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>完成了以上所有的步骤后，一个基础简单的博客就搭建成功了！</li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
