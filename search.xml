<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2022/12/09/ElasticSearch/"/>
      <url>/2022/12/09/ElasticSearch/</url>
      <content type="html"><![CDATA[<p>ElasticSearch 集群安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p>先决条件：</p><ul><li><strong>安装 JDK</strong></li></ul></li><li><p>历史版本下载： </p><ul><li><a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></li></ul></li><li><p>7.6.2版本：</p><ul><li><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-6-2" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-6-2</a></li></ul></li></ul><h3 id="创建用户组和用户"><a href="#创建用户组和用户" class="headerlink" title="创建用户组和用户"></a>创建用户组和用户</h3><ul><li>用户名根据实际情况定，这里就用 elastic 了</li></ul><pre><code class="shell"># 创建用户组groupadd elastic# 创建用户useradd -m -d /home/elastic -g elastic elastic# 修改密码passwd elastic</code></pre><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre><code class="bash"># 创建ElasticSearch数据目录和日志目录mkdir -p /opt/es/datamkdir -p /opt/es/logs</code></pre><ul><li>解压至当前目录</li></ul><pre><code class="undefined">tar -zxvf elasticsearch-7.13.2-linux-x86_64.tar.gz -C /opt/es/</code></pre><ul><li>赋予所有人都可以修改/读取的权限</li></ul><pre><code class="shell">chmod -R 777 /opt/es/*</code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><pre><code class="bash">cd /opt/es/elasticsearch-7.13.2/config/vim elasticsearch.yml</code></pre><ul><li>修改ip等信息</li></ul><pre><code class="bash"># 集群配置cluster.name: ES #修改集群名称，自定义即可node.name: node01 #修改当前ES节点名称node.master: true #作为master节点node.data: true #作为node节点path.data: /opt/es/data #修改数据保存目录path.logs: /opt/es/logs #修改日志保存目录network.host: 192.xxx.xxx.xxx #修改ES网络IPdiscovery.seed_hosts: [&quot;ip&quot;, &quot;ip&quot;, &quot;ip&quot;] #集群通信cluster.initial_master_nodes: [&quot;node01&quot;, &quot;node02&quot;,&quot;node03&quot;] #添加集群节点名称# 密码配置xpack.security.enabled: truexpack.license.self_generated.type: basicxpack.security.transport.ssl.enabled: truexpack.security.transport.ssl.verification_mode: certificatexpack.security.transport.ssl.keystore.path: elastic-certificates.p12 #证书位置xpack.security.transport.ssl.truststore.path: elastic-certificates.p12 #证书位置</code></pre><h3 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h3><pre><code class="bash">cd /opt/es/elasticsearch-7.13.2</code></pre><ul><li>在 /opt/es/elasticsearch-7.13.2目录下生成 elastic-stack-ca.p12 文件</li></ul><pre><code class="bash">./bin/elasticsearch-certutil caThis tool assists you in the generation of X.509 certificates and certificatesigning requests for use with SSL/TLS in the Elastic stack.The &#39;ca&#39; mode generates a new &#39;certificate authority&#39;This will create a new X.509 certificate and private key that can be usedto sign certificate when running in &#39;cert&#39; mode.Use the &#39;ca-dn&#39; option if you wish to configure the &#39;distinguished name&#39;of the certificate authorityBy default the &#39;ca&#39; mode produces a single PKCS#12 output file which holds:    * The CA certificate    * The CA&#39;s private keyIf you elect to generate PEM format certificates (the -pem option), then the output willbe a zip file containing individual files for the CA certificate and private keyPlease enter the desired output file [elastic-stack-ca.p12]:   #直接回车Enter password for elastic-stack-ca.p12 :  #直接回车</code></pre><ul><li>在 /opt/es/elasticsearch-7.13.2目录下生成elastic-certificates.p12文件</li></ul><pre><code class="bash">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 This tool assists you in the generation of X.509 certificates and certificatesigning requests for use with SSL/TLS in the Elastic stack.The &#39;cert&#39; mode generates X.509 certificate and private keys.    * By default, this generates a single certificate and key for use       on a single instance.    * The &#39;-multiple&#39; option will prompt you to enter details for multiple       instances and will generate a certificate and key for each one    * The &#39;-in&#39; option allows for the certificate generation to be automated by describing       the details of each instance in a YAML file    * An instance is any piece of the Elastic Stack that requires an SSL certificate.      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats      may all require a certificate and private key.    * The minimum required value for each instance is a name. This can simply be the      hostname, which will be used as the Common Name of the certificate. A full      distinguished name may also be used.    * A filename value may be required for each instance. This is necessary when the      name would result in an invalid file or directory name. The name provided here      is used as the directory name (within the zip) and the prefix for the key and      certificate files. The filename is required if you are prompted and the name      is not displayed in the prompt.    * IP addresses and DNS names are optional. Multiple values can be specified as a      comma separated string. If no IP addresses or DNS names are provided, you may      disable hostname verification in your SSL configuration.    * All certificates generated by this tool will be signed by a certificate authority (CA)      unless the --self-signed command line option is specified.      The tool can automatically generate a new CA for you, or you can provide your own with      the --ca or --ca-cert command line options.By default the &#39;cert&#39; mode produces a single PKCS#12 output file which holds:    * The instance certificate    * The private key for the instance certificate    * The CA certificateIf you specify any of the following options:    * -pem (PEM formatted output)    * -keep-ca-key (retain generated CA key)    * -multiple (generate multiple certificates)    * -in (generate certificates from an input file)then the output will be be a zip file containing individual certificate/key filesEnter password for CA (elastic-stack-ca.p12) :  #直接回车Please enter the desired output file [elastic-certificates.p12]:  #直接回车Enter password for elastic-certificates.p12 :  #直接回车Certificates written to /opt/es/elasticsearch-7.13.2/elastic-certificates.p12This file should be properly secured as it contains the private key for your instance.This file is a self contained file and can be copied and used &#39;as is&#39;For each Elastic product that you wish to configure, you should copythis &#39;.p12&#39; file to the relevant configuration directoryand then follow the SSL configuration instructions in the product guide.For client applications, you may only need to copy the CA certificate andconfigure the client to trust this certificate.</code></pre><ul><li>移动 elastic-stack-ca.p12  elastic-certificates.p12 到config目录下</li></ul><pre><code class="bash">mv elastic-stack-ca.p12 elastic-certificates.p12 config/</code></pre><ul><li>如果之前节点证书设置了密码，将密码添加到 keystore</li></ul><pre><code class="shell">./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password</code></pre><h3 id="拷贝安装目录"><a href="#拷贝安装目录" class="headerlink" title="拷贝安装目录"></a>拷贝安装目录</h3><ul><li>分发ElasticSearch目录到集群所有服务器，同时修改每个文件的node.name和network.host</li></ul><h3 id="修改相关配置文件"><a href="#修改相关配置文件" class="headerlink" title="修改相关配置文件"></a>修改相关配置文件</h3><blockquote><p>问题：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><p>原因：elasticsearch用户拥有的内存权限太小，至少需要262144</p></blockquote><pre><code class="shell">vim /etc/security/limits.conf# 在最后添加* soft nofile 65536* hard nofile 131072* soft nproc 4096* hard nproc 4096</code></pre><ul><li>切换到root用户，在/etc/sysctl.conf文件最后添加一行</li></ul><pre><code class="shell">echo &quot;vm.max_map_count=655360&quot; &gt;&gt; /etc/sysctl.conf</code></pre><ul><li>添加完毕之后，执行命令，使配置生效：</li></ul><pre><code class="shell">sysctl -p</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li>切换用户</li></ul><pre><code class="shell">su elastic</code></pre><ul><li>启动</li></ul><pre><code class="shell">./bin/elasticsearch -d</code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><ul><li>这一步需要将集群中的所有机器启动。</li><li>访问ip 验证集群的通讯是否正常。</li></ul><pre><code class="shel">http://ip:9200/_cluster/stats?pretty</code></pre><ul><li>集群构建成功后：</li></ul><pre><code class="shell"># 手动设置密码./bin/elasticsearch-setup-passwords interactiveInitiating the setup of passwords for reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.You will be prompted to enter passwords as the process progresses.Please confirm that you would like to continue [y/N]y# 输入各用户密码即可Enter password for [elastic]: Reenter password for [elastic]: Enter password for [apm_system]: Reenter password for [apm_system]: Enter password for [kibana_system]: Reenter password for [kibana_system]: Enter password for [logstash_system]: Reenter password for [logstash_system]: Enter password for [beats_system]: Reenter password for [beats_system]: Enter password for [remote_monitoring_user]: Reenter password for [remote_monitoring_user]: Changed password for user [apm_system]Changed password for user [kibana_system]Changed password for user [kibana]Changed password for user [logstash_system]Changed password for user [beats_system]Changed password for user [remote_monitoring_user]Changed password for user [elastic]</code></pre>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/12/07/Nginx/"/>
      <url>/2022/12/07/Nginx/</url>
      <content type="html"><![CDATA[<p>nginx https 相关配置</p><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>实现https访问，必须要安装http_ssl_module模块，可以通过以下命令查看：</li></ul><pre><code class="shell">./nginx -V</code></pre><ul><li>如果configure arguments 参数里没有 –with-http_ssl_module，重新安装nginx。</li></ul><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><ol><li>创建一个私钥</li></ol><pre><code class="shell">openssl genrsa -des3 -out server.key 2048</code></pre><ol><li>生成 CSR Common Name 要输入域名</li></ol><pre><code class="shell">openssl req -new -key server.key -out server.csr</code></pre><ol><li>删除私钥中的密码, 有利于自动化部署</li></ol><pre><code class="shell">openssl rsa -in server.key -out server.key</code></pre><ol><li>生成自签名证书</li></ol><pre><code class="shell">openssl x509 -req -days 10000 -in server.csr -signkey server.key -out server.crt</code></pre><ol><li>生成 PEM 格式的证书</li></ol><pre><code class="shell">openssl x509 -in server.crt -out server.pem -outform PEM</code></pre><h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><pre><code class="shell">http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    client_max_body_size 100M;    # 负载均衡     upstream data-gateway {        server 192.168.1.1:8090;        server 192.168.1.2:8090;    }    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    gzip  on;server {    # 修改为实际端口    listen  8080  ssl;    listen  [::]:8180 ssl;    server_name  10.73.1.1;    keepalive_timeout  70;    default_type        application/octet-stream;    # Load modular configuration files from the /etc/nginx/conf.d directory.    # See http://nginx.org/en/docs/ngx_core_module.html#include    # for more information.    include /etc/nginx/conf.d/*.conf;    # 证书路径需要根据实际情况修改    ssl_certificate  /apps/https-pem/server.pem;    ssl_certificate_key  /apps/https-pem/server.key;    ssl_session_cache  shared:SSL:10m;    ssl_session_timeout  10m;    location / {        proxy_redirect off;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        # 负载均衡配置        proxy_pass http://data-gateway;    }}    # vue 前端    server {        listen       9201;        server_name  localhost;        location / {            root   /apps/web/dist;            try_files $uri $uri/ @router;            index  index.html index.htm;        }        location @router {            rewrite ^.*$ /index.html last;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }    include vhosts/*.conf;}</code></pre>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/12/06/MySQL/"/>
      <url>/2022/12/06/MySQL/</url>
      <content type="html"><![CDATA[<p>MySQL 主从/主主 集群搭建。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><pre><code class="shell">uname -acat /proc/versioncat /etc/redhat-release</code></pre><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>MySQL 5.7 Linux安装包下载：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></li><li>官网下载安装包,下载的安装包为：mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz</li></ul><h3 id="查询并卸载系统自带的Mariadb"><a href="#查询并卸载系统自带的Mariadb" class="headerlink" title="查询并卸载系统自带的Mariadb"></a>查询并卸载系统自带的Mariadb</h3><ul><li>批量卸载</li></ul><pre><code class="shell">rpm -qa | grep mariadb | xargs rpm -e --nodeps</code></pre><h3 id="新建用户-组"><a href="#新建用户-组" class="headerlink" title="新建用户/组"></a>新建用户/组</h3><ul><li>添加mysql用户组</li></ul><pre><code class="shell">groupadd mysql</code></pre><ul><li>添加添加mysql用户</li></ul><pre><code class="shell">useradd -g mysql mysql -d /home/mysql</code></pre><ul><li>修改mysql用户的登陆密码</li></ul><pre><code class="shell">passwd mysqlpwd***</code></pre><ul><li>创建临时目录、数据目录和日志目录</li></ul><pre><code class="shell">mkdir -p /home/mysql/3306/datamkdir -p /home/mysql/3306/logmkdir -p /home/mysql/3306/tmp# 进入目录/home修改用户组权限cd /homechown -R mysql:mysql mysql/</code></pre><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><ul><li><p>将下载的mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz安装包上传至服务器/usr/local目录下</p></li><li><p>进入目录usr/local,并解压缩上传的安装介质</p></li></ul><pre><code class="shell">cd /usr/localtar -zxvf mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz</code></pre><ul><li>建立软链接，便于以后版本升级</li></ul><pre><code class="shell">ln -s mysql-5.7.30-linux-glibc2.12-x86_64 /usr/local/mysql</code></pre><ul><li>修改mysql文件夹下所有文件的用户和用户组</li></ul><pre><code class="shell">chown -R mysql:mysql /usr/local/mysql/</code></pre><h3 id="配置文件上传"><a href="#配置文件上传" class="headerlink" title="配置文件上传"></a>配置文件上传</h3><ul><li>创建配置文件，将配置文件my.cnf上传至服务器目录etc下。</li></ul><pre><code class="ini">[client]                                        # 客户端设置，即客户端默认的连接参数port = 3306                                    # 默认连接端口socket = /home/mysql/3306/tmp/mysql.sock                        # 用于本地连接的socket套接字，mysqld守护进程生成了这个文件[mysqld]                                        # 服务端基本设置# 基础设置server-id = 1                                  # Mysql服务的唯一编号 每个mysql服务Id需唯一port = 3306                                    # MySQL监听端口basedir = /usr/local/mysql                      # MySQL安装根目录datadir = /home/mysql/3306/data                      # MySQL数据文件所在位置tmpdir  = /home/mysql/3306/tmp                                  # 临时目录，比如load data infile会用到socket = /home/mysql/3306/tmp/mysql.sock        # 为MySQL客户端程序和服务器之间的本地通讯指定一个套接字文件pid-file = /home/mysql/3306/log/mysql.pid      # pid文件所在目录skip_name_resolve = 1                          # 只能用IP地址检查客户端的登录，不用主机名character-set-server = utf8mb4                  # 数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）transaction_isolation = READ-COMMITTED          # 事务隔离级别，默认为可重复读，MySQL默认可重复读级别collation-server = utf8mb4_general_ci          # 数据库字符集对应一些排序等规则，注意要和character-set-server对应init_connect=&#39;SET NAMES utf8mb4&#39;                # 设置client连接mysql时的字符集,防止乱码lower_case_table_names = 1                      # 是否对sql语句大小写敏感，1表示不敏感max_connections = 1000                          # 最大连接数max_connect_errors = 1000                      # 最大错误连接数explicit_defaults_for_timestamp = true          # TIMESTAMP如果没有显示声明NOT NULL，允许NULL值max_allowed_packet = 128M                      # SQL数据包发送的大小，如果有BLOB对象建议修改成1Ginteractive_timeout = 1800                      # MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭wait_timeout = 1800                            # MySQL默认的wait_timeout值为8个小时, interactive_timeout参数需要同时配置才能生效tmp_table_size = 16M                            # 内部内存临时表的最大值 ，设置成128M；比如大数据量的group by ,order by时可能用到临时表；超过了这个值将写入磁盘，系统IO压力增大max_heap_table_size = 128M                      # 定义了用户可以创建的内存表(memory table)的大小query_cache_size = 0                            # 禁用mysql的缓存查询结果集功能；后期根据业务情况测试决定是否开启；大部分情况下关闭下面两项query_cache_type = 0# 用户进程分配到的内存设置，每个session将会分配参数设置的内存大小read_buffer_size = 2M                          # MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_rnd_buffer_size = 8M                      # MySQL的随机读缓冲区大小sort_buffer_size = 8M                          # MySQL执行排序使用的缓冲大小binlog_cache_size = 1M                          # 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32Kback_log = 130                                  # 在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中；官方建议back_log = 50 + (max_connections / 5),封顶数为900# 日志设置log_error = /home/mysql/3306/log/error.log                          # 数据库错误日志文件slow_query_log = 1                              # 慢查询sql日志设置long_query_time = 1                            # 慢查询时间；超过1秒则为慢查询slow_query_log_file = /home/mysql/3306/log/slow.log                  # 慢查询日志文件log_queries_not_using_indexes = 1              # 检查未使用到索引的sqllog_throttle_queries_not_using_indexes = 5      # 用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数。该值默认为0，表示没有限制min_examined_row_limit = 100                    # 检索的行数必须达到此值才可被记为慢查询，查询检查返回少于该参数指定行的SQL不被记录到慢查询日志expire_logs_days = 5                            # MySQL binlog日志文件保存的过期时间，过期后自动删除# 主从复制设置log-bin = mysql-bin                            # 开启mysql binlog功能binlog_format = ROW                            # binlog记录内容的方式，记录被操作的每一行binlog_row_image = minimal                      # 对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列# Innodb设置innodb_open_files = 500                        # 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300innodb_buffer_pool_size = 64M                  # InnoDB使用一个缓冲池来保存索引和原始数据，一般设置物理存储的60% ~ 70%；这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少innodb_log_buffer_size = 2M                    # 此参数确定写日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间innodb_flush_method = O_DIRECT                  # O_DIRECT减少操作系统级别VFS的缓存和Innodb本身的buffer缓存之间的冲突innodb_write_io_threads = 4                    # CPU多核处理能力设置，根据读，写比例进行调整innodb_read_io_threads = 4innodb_lock_wait_timeout = 120                  # InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒innodb_log_file_size = 32M                      # 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></pre><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><ul><li>进入目录/usr/local/mysql/bin</li></ul><pre><code class="shell">cd /usr/local/mysql/bin</code></pre><ul><li>初始化数据库，指定启动MySQL的用户为mysql</li></ul><pre><code class="shell">./mysqld --initialize --user=mysql</code></pre><ul><li>安装完成后，在my.cnf中配置的datadir目录下生成一个error.log文件，里面记录了root用户的随机密码。</li></ul><pre><code class="shell">cd /home/mysql/3306/log# 查看tailf error.log2022-04-29T03:21:24.5894837 1 [Note][ Atemporarypasswordisgenerated for root@localhost: 7=_ fBr8xiw&amp;r</code></pre><ul><li>root@localhost:后面的就是随机密码</li></ul><h3 id="设置开机自启动服务"><a href="#设置开机自启动服务" class="headerlink" title="设置开机自启动服务"></a>设置开机自启动服务</h3><ul><li>复制启动脚本到资源目录</li></ul><pre><code class="shell">cd /usr/local/mysqlcp ./support-files/mysql.server /etc/rc.d/init.d/mysqld</code></pre><ul><li>增加mysqld服务控制脚本执行权限</li></ul><pre><code class="shell">chmod +x /etc/rc.d/init.d/mysqld</code></pre><ul><li>将mysqld服务加入到系统服务</li></ul><pre><code class="shell">chkconfig --add mysqld</code></pre><ul><li>检查mysqld服务是否已经生效</li></ul><pre><code class="shell">chkconfig --list mysqld</code></pre><ul><li>如果出现以下信息，说明已经生效</li></ul><pre><code class="shell">[ root@localhost mysql]# chkconfig --list mysqldNote: This output shows SysV services only and does not include native systemd services. SysV configuration data might be overridden by nativesystemd configu ration .If you want to list systemd services use &#39; systemctl list-unit- filesTo see services enabled on particular target use&#39; sys temctl list- dependencies [target]&#39;mysqLd0:off   1:off   2:on  3:on  4: on  5:on  6:off</code></pre><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><ul><li>切换至mysql用户</li></ul><pre><code class="shell">su -mysql</code></pre><ul><li>启动mysql</li></ul><pre><code class="shell">service mysqld start</code></pre><ul><li><p>如果出现Starting  MySQL.SUCCESS! 服务启动成功</p></li><li><p>为了更好的操作mysql，配置环境变量</p></li></ul><pre><code class="shell">vim /etc/profile# 增加：export PATH=$PATH:/usr/local/mysql/binsource /etc/profile</code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><ul><li>登陆mysql，密码为error.log中生成的随机密码</li></ul><pre><code class="shell">mysql -uroot -p</code></pre><ul><li>修改root用户密码</li></ul><pre><code class="shell">set password for root@localhost=password(&quot;**&quot;); </code></pre><h3 id="授权用户远程访问"><a href="#授权用户远程访问" class="headerlink" title="授权用户远程访问"></a>授权用户远程访问</h3><ul><li>授权用户远程登陆</li></ul><pre><code class="shell">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;3GtzcH&#39; with grant option;</code></pre><ul><li>刷新mysql的权限</li></ul><pre><code class="shell">flush privileges;quit;</code></pre><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>启动/停止/重启</li></ul><pre><code class="shell">#启动service mysqld start#停止service mysqld stop重启service mysqld restart</code></pre><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><p>在主从配置之前需要确保两台mysql需要同步的库状态一致。</p><h3 id="主"><a href="#主" class="headerlink" title="主"></a>主</h3><ul><li><p>配置文件默认在<code>/etc/my.cnf</code>下。</p></li><li><p>在配置文件中新增配置：</p></li></ul><pre><code class="ini">[mysqld]## 同一局域网内注意要唯一server-id=1## 开启二进制日志功能，可以随便取（关键）log-bin=mysql-bin</code></pre><ul><li>修改配置后需要重启才能生效：</li></ul><pre><code>service mysql restart</code></pre><ul><li>重启之后进入mysql：</li></ul><pre><code>mysql -uroot -p</code></pre><ul><li><p><strong>这一步可以忽略，可以用root用户进行同步：</strong>在master数据库创建数据同步用户，授予用户 slave  REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于在主从库之间同步数据。</p><pre><code>CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;passwd****&#39;;GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</code></pre></li><li><p>语句中的<code>%</code>代表所有服务器都可以使用这个用户，如果想指定特定的ip，将<code>%</code>改成ip即可。</p></li><li><p>查看主mysql的状态：</p></li></ul><pre><code>mysql&gt; show master status\G;*************************** 1. row ***************************             File: master-bin.00001         Position: 666     Binlog_Do_DB:  Binlog_Ignore_DB: Executed_Gtid_Set: 37f084e8-9161-11eb-abf6-000c29f882cb:12-13,87366c38-9164-11eb-988a-000c293c71e0:1-14,87366c38-9164-11eb-988a-000c293c71e1:1-101 row in set (0.00 sec)</code></pre><ul><li>记录下<code>File</code>和<code>Position</code>的值，并且不进行其他操作以免引起<code>Position</code>的变化。</li></ul><h3 id="从"><a href="#从" class="headerlink" title="从"></a>从</h3><ul><li>在从<code>my.cnf</code>配置中新增：</li></ul><pre><code class="ini">[mysqld]## 设置server_id, 注意不能和主重复server-id=2## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用log-bin=mysql-slave-bin## relay_log配置中继日志relay_log=mysql-relay-bin</code></pre><ul><li>修改配置后需要重启才能生效：</li></ul><pre><code>service mysql restart</code></pre><ul><li>重启之后进入mysql：</li></ul><pre><code class="shell"># 连接mysqlmysql -uroot -pchange master to master_host=&#39;***ip&#39;, master_user=&#39;root&#39;, master_password=&#39;***&#39;, master_port=3306, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos= 666, master_connect_retry=30;</code></pre><p><strong>master_host</strong> ：Master的地址</p><p><strong>master_port</strong>：Master的端口号</p><p><strong>master_user</strong>：用于数据同步的用户</p><p><strong>master_password</strong>：用于同步的用户的密码</p><p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p><p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p><p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p><ul><li>在从mysql中查看主从同步状态：</li></ul><pre><code>show slave status \G;......            Slave_IO_Running: NO            Slave_SQL_Running: NO......</code></pre><ul><li><p>此时的SlaveIORunning 和 SlaveSQLRunning 都是No，因为我们还没有开启主从复制过程。</p></li><li><p>开启主从复制：</p></li></ul><pre><code>start slave;</code></pre><ul><li>再次查看同步状态：</li></ul><pre><code class="shell">show slave status \G;......            Slave_IO_Running: Yes            Slave_SQL_Running: Yes......</code></pre><p>SlaveIORunning 和 SlaveSQLRunning 都是Yes说明主从复制已经开启。</p><p>若SlaveIORunning一直是Connecting，有下面4种原因：</p><p>1、网络不通，检查ip端口</p><p>2、密码不对，检查用于同步的用户名和密码</p><p>3、pos不对，检查Master的Position</p><p>4、mysql8特有的密码规则问题引起：</p><pre><code>ALTER USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;&#39;;</code></pre><p>将密码规则修改为：mysql_native_password</p><h2 id="主从-切换至-主主关系"><a href="#主从-切换至-主主关系" class="headerlink" title="主从  切换至  主主关系"></a>主从  切换至  主主关系</h2><h3 id="一、清除原-从数据库数据及主从关系"><a href="#一、清除原-从数据库数据及主从关系" class="headerlink" title="一、清除原 从数据库数据及主从关系"></a>一、清除原 从数据库数据及主从关系</h3><h4 id="关闭主从数据库原有的主从关系"><a href="#关闭主从数据库原有的主从关系" class="headerlink" title="关闭主从数据库原有的主从关系"></a>关闭主从数据库原有的主从关系</h4><ol><li>从库停止salve</li></ol><pre><code class="shell">mysql&gt; stop salve;</code></pre><ol><li>查看主从关系连接状态，确保IO线程和SQL线程停止运行</li></ol><pre><code class="yaml">mysql&gt; show slave status\G;......             Slave_IO_Running: NO            Slave_SQL_Running: NO......</code></pre><ol><li>清除主从复制关系</li></ol><pre><code class="shell">  mysql&gt;reset slave all;  QueryOK, 0 rowsaffected (0,04 sec)  mysql&gt; show slave status\G  Emptyset (0,00 sec)</code></pre><h4 id="清除从数据库原有数据"><a href="#清除从数据库原有数据" class="headerlink" title="清除从数据库原有数据"></a>清除从数据库原有数据</h4><blockquote><p>这一步根据实际情况，处理数据库</p></blockquote><ol><li>从库删除原有tsc数据库</li></ol><pre><code class="shell">mysql&gt; drop database tsc;</code></pre><ol><li>从库重新创建 数据库</li></ol><pre><code class="lua">mysql&gt; create database tsc;</code></pre><h3 id="二、将主库上的数据备份到从库"><a href="#二、将主库上的数据备份到从库" class="headerlink" title="二、将主库上的数据备份到从库"></a>二、将主库上的数据备份到从库</h3><ul><li>登录主库，备份所有数据库：</li></ul><pre><code class="shell">mysqldump -uroot -p --all-databases &gt; sqlfile.sql</code></pre><ul><li>将sql文件传到从库所属服务器上，恢复数据：</li></ul><pre><code class="shell">mysql -u  b_user -h 127.0.0.1 -p&#39;H_password&#39; -P3306  &lt; sqlfile.sql</code></pre><ul><li>备份完成后，检查从库中的数据表数量:</li></ul><pre><code class="shell">mysql&gt; use ***;mysql&gt; show tables;mysql&gt; select count(*) from tb_fever_treatment;+----------+| count(*) |+----------+|    50056 |+----------+1 row in set (0.01 sec)</code></pre><h3 id="三、建立主主关系"><a href="#三、建立主主关系" class="headerlink" title="三、建立主主关系"></a>三、建立主主关系</h3><h4 id="修改数据库配置文件并重启生效"><a href="#修改数据库配置文件并重启生效" class="headerlink" title="修改数据库配置文件并重启生效"></a>修改数据库配置文件并重启生效</h4><ul><li>修改主库mysql配置文件</li></ul><pre><code class="ini">[root@mysql-1 ~]# vim /etc/my.cnf[mysqld]log_bin=master-binbinlog_format=ROWserver_id=1#在原有配置上增加以下内容#注意offset参数，主主关系两个数据库都可以写入时，自增id会出现冲突，这个属性就是避免该情况。自增不同大小。auto-increment-offset=1auto-increment-increment=2relay_log=mysql-relay-binlog-slave-updates=on</code></pre><ul><li>修改从库mysql配置文件</li></ul><pre><code class="ini">[root@mysql-2 ~]# vim /etc/my.cnf[mysqld]log_bin=salve-binbinlog_format=ROWserver_id=2#在原有配置上增加以下内容auto-increment-offset=2auto-increment-increment=2relay_log=mysql-relay-binlog-slave-updates=on</code></pre><ul><li>重启主数据库并验证。</li></ul><pre><code class="csharp">[root@mysql-1 ~]# systemctl restart mysqld[root@mysql-1 ~]# systemctl status mysqld</code></pre><ul><li>重启从数据库并验证。</li></ul><pre><code class="csharp">[root@mysql-2 ~]# systemctl restart mysqld[root@mysql-2 ~]# systemctl status mysqld</code></pre><h4 id="建立数据库主主关系"><a href="#建立数据库主主关系" class="headerlink" title="建立数据库主主关系"></a>建立数据库主主关系</h4><h5 id="以mysql-1为主、mysql2为从建立主从关系"><a href="#以mysql-1为主、mysql2为从建立主从关系" class="headerlink" title="以mysql-1为主、mysql2为从建立主从关系"></a>以mysql-1为主、mysql2为从建立主从关系</h5><ul><li>查看mysql-1的master状态，记录下file和position的值</li></ul><pre><code class="markdown">mysql&gt; show master status\G;*************************** 1. row ***************************             File: master-bin.00001         Position: 666     Binlog_Do_DB:  Binlog_Ignore_DB: Executed_Gtid_Set: 37f084e8-9161-11eb-abf6-000c29f882cb:12-13,87366c38-9164-11eb-988a-000c293c71e0:1-14,87366c38-9164-11eb-988a-000c293c71e1:1-101 row in set (0.00 sec)</code></pre><ul><li>在mysql-2上建立主从关系</li></ul><pre><code class="shell">mysql&gt; change master to master_host=&#39;****ip&#39;,master_port=3306,master_user=&#39;root&#39;,master_password=&#39;**&#39;,master_log_file=&#39;master-bin.00001&#39;,master_log_pos=666;</code></pre><ul><li>在mysql-2上打开主从关系</li></ul><pre><code class="shell">mysql&gt; start slave;</code></pre><ul><li>在mysql-2上查看主从关系，当IO线程和SQL线程都在运行时则主从建立成功</li></ul><pre><code class="yaml">mysql&gt; show slave status\G;......             Slave_IO_Running: Yes            Slave_SQL_Running: Yes......</code></pre><h5 id="以mysql-2为主、mysql-1为从建立主从关系"><a href="#以mysql-2为主、mysql-1为从建立主从关系" class="headerlink" title="以mysql-2为主、mysql-1为从建立主从关系"></a>以mysql-2为主、mysql-1为从建立主从关系</h5><ul><li>查看mysql-2的master状态，记录下file和position的值</li></ul><pre><code class="markdown">mysql&gt; show master status\G;*************************** 1. row ***************************             File: master-bin.00001         Position: 225     Binlog_Do_DB:  Binlog_Ignore_DB: Executed_Gtid_Set: 37f084e8-9161-11eb-abf6-000c29f882cb:12-13,87366c38-9164-11eb-988a-000c293c71e0:1-13,87366c38-9164-11eb-988a-000c293c71e1:1-101 row in set (0.00 sec)</code></pre><ul><li>在mysql-1上建立主从关系</li></ul><pre><code class="shell">mysql&gt; change master to master_host=&#39;***ip&#39;,master_port=3306,master_user=&#39;root&#39;,master_password=&#39;**&#39;,master_log_file=&#39;master-bin.00001&#39;,master_log_pos=225;</code></pre><ul><li>在mysql-1上打开主从关系</li></ul><pre><code class="shell">mysql&gt; start slave;</code></pre><ul><li>在mysql-1上查看主从关系，当IO线程和SQL线程都在运行时则主从建立成功</li></ul><pre><code class="lua">mysql&gt; show slave status\G;</code></pre><h4 id="主主关系建立失败回退方案"><a href="#主主关系建立失败回退方案" class="headerlink" title="主主关系建立失败回退方案"></a>主主关系建立失败回退方案</h4><p>若主主关系建立失败，则撤销主主关系，mysql-1对外提供服务不受影响，user用户无感知。</p><p>在mysql-1上运行:</p><pre><code class="shell">mysql&gt; stop slave;</code></pre><p>在mysql-2上运行:</p><pre><code class="shell">mysql&gt; stop slave;</code></pre>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装OpenJDK</title>
      <link href="/2022/10/17/%E5%AE%89%E8%A3%85OpenJDK/"/>
      <url>/2022/10/17/%E5%AE%89%E8%A3%85OpenJDK/</url>
      <content type="html"><![CDATA[<p>卸载之前的 jdk<br>rpm -qa | grep jdk | xargs rpm -evh –nodeps</p><p>rpm -qa | grep java | xargs rpm -evh –nodeps</p><blockquote><p>-e 卸载</p></blockquote><p>-vh 展示详细信息和进度</p><p>–nodeps 在安装或升级包之前不做依赖检查</p><p>rpm -ivh jdk-8u144-linux-x64.rpm</p><p>-i 安装</p><p>-ivh  在安装的时候展示正在安装的文件信息以及安装进度</p>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DB2 重定向恢复数据库</title>
      <link href="/2018/12/25/DB2-%E9%87%8D%E5%AE%9A%E5%90%91%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/12/25/DB2-%E9%87%8D%E5%AE%9A%E5%90%91%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>不同Linux 主机之间脱机备份恢复 DB2 数据库.</p><h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><ul><li>backup, restore 前需关闭连接</li></ul><pre><code class="shell">db2 force applications alldb2stop forcedb2start</code></pre><ul><li>连接数据库</li></ul><pre><code class="shell">db2 connect to proddb user username using password</code></pre><ul><li>导出备份</li></ul><pre><code class="shell">db2 backup db proddb to /DATATBS_LARGE/</code></pre><ul><li>上传备份文件</li></ul><h2 id="重定向数据库"><a href="#重定向数据库" class="headerlink" title="重定向数据库"></a>重定向数据库</h2><ul><li>生成重定向恢复脚本(certdb.sql)</li></ul><pre><code class="shell">db2 restore db CERTDB from /home/db2inst1/backup/CERTDB/  taken at 20181222023047 redirect generate script certdb.sql</code></pre><blockquote><p><strong>20181222023047</strong> 是该备份时间戳。<br><strong>/home/db2inst1/backup/CERTDB/</strong> 是该备份路径。</p></blockquote><hr><ul><li>根据目标主机实际挂载点 编辑生成的 certdb.sql </li></ul><p><img src="http://r.photo.store.qq.com/psb?/V12zu5NQ3n2IN9/nizVeOHPuYaM9Fr9*Stj8qf1UcJanpd8o7MihYyIHmY!/r/dDIBAAAAAAAA" alt="image"></p><p><img src="http://r.photo.store.qq.com/psb?/V12zu5NQ3n2IN9/FZA.Z74LL.6u4n5a8AJYAZ.M.C81DbWVZfFsy4.BmbU!/r/dL8AAAAAAAAA" alt="image"></p><ul><li>执行修改后的脚本，开始restore恢复数据库</li></ul><pre><code class="shell">db2 -tvf certdb.sql</code></pre><ul><li>可以使用另一个终端查看恢复进度</li></ul><pre><code class="shell">db2top -d certdb</code></pre><blockquote><p>Shift + T</p></blockquote><ul><li>恢复备份后，回滚日志</li></ul><pre><code class="shell">db2 rollforward db certdb to end of backup and stop</code></pre><ul><li>尝试连接数据库</li></ul><pre><code class="shell">db2 connect to certdb user name using password</code></pre>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux环境下创建Windows启动盘</title>
      <link href="/2018/07/30/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%9B%E5%BB%BAWindows%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
      <url>/2018/07/30/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%9B%E5%BB%BAWindows%E5%90%AF%E5%8A%A8%E7%9B%98/</url>
      <content type="html"><![CDATA[<p>并非使用dd命令，安全快速的制作 Windows USB启动。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>在linux环境下，众所周知的<code>dd</code>命令非常强大，这种底层数据处理的方式，多次将我的U盘搞坏。提醒大家一下，慎用<code>dd</code>！</p></li><li><p>下面介绍另一种方式——<strong><code>WoeUSB</code></strong>。</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>Manjaro linux</li></ul><pre><code>yaourt -S woeusb</code></pre><ul><li>Ubuntu</li></ul><pre><code>sudo add-apt-repository ppa:nilarimogard/webupd8sudo apt update sudo apt install woeusb</code></pre><ul><li><p>其他发行版自行使用软件包管理器安装。</p></li><li><p>或从github中clone使用。</p></li><li><p><a href="https://github.com/slacka/WoeUSB" target="_blank" rel="noopener">https://github.com/slacka/WoeUSB</a></p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="一、完全覆盖创建（推荐）"><a href="#一、完全覆盖创建（推荐）" class="headerlink" title="一、完全覆盖创建（推荐）"></a>一、完全覆盖创建（推荐）</h3><ul><li><p>使用 <code>-d</code> 命令，完全擦除整个USB存储设备，然后从头开始构建可启动的Windows USB设备。</p></li><li><p>警告：设备上的所有先前数据都将被擦除，请备份重要数据。</p></li><li><p>命令如下：</p></li></ul><pre><code>woeusb --device &lt;源媒体路径&gt; &lt;device&gt;例子：- woeusb --device Windows7_x64.iso / dev / sdX- woeusb --device / dev / sr0 / dev / sdX</code></pre><hr><h3 id="二、共存创建（不建议）"><a href="#二、共存创建（不建议）" class="headerlink" title="二、共存创建（不建议）"></a>二、共存创建（不建议）</h3><ul><li><p>使用 <code>-p</code> 命令，将Windows文件复制到USB存储设备的现有分区并使其可引导。</p></li><li><p>只要不存在文件名冲突，这就允许文件共存。</p></li><li><p>警告：所有具有<code>相同名称</code>的文件都将被覆盖！</p></li><li><p>命令如下</p></li></ul><pre><code>woeusb --partition &lt;源媒体路径&gt; &lt;partition&gt;例子：- woeusb --partition Windows7_x64.iso / dev / sdX1- woeusb --partition / dev / sr0 / dev / sdX1</code></pre><hr><h3 id="三、详细参数"><a href="#三、详细参数" class="headerlink" title="三、详细参数"></a>三、详细参数</h3><ul><li>详细模式。</li></ul><pre><code>--verbose，-v</code></pre><ul><li>显示此帮助消息并退出。</li></ul><pre><code>--help，-h</code></pre><ul><li>打印应用程序版本。</li></ul><pre><code>--version，-V</code></pre><ul><li>显示有关此应用程序的信息。</li></ul><pre><code>--about, -ab</code></pre><ul><li>禁用消息着色。</li></ul><pre><code>--no-color</code></pre><ul><li>启用脚本调试。</li></ul><pre><code>--debug</code></pre><ul><li>在–device creation方法中为新创建的文件系统指定标签。</li><li>请注意，标签未经过有效性验证，对于文件系统可能是非法的。</li></ul><pre><code>--label，-l &lt;filesystem_label&gt;</code></pre><ul><li>解决方法BIOS错误，如果切换了分区的引导标志，则不包括启动菜单中的设备。</li></ul><pre><code>--workaround-bios-boot-flag</code></pre><ul><li>开发人员在不运行整个构建的情况下测试某些功能的开发选项。</li></ul><pre><code>--debugging-internal-function-call &lt;function name&gt;（function_argument）...</code></pre><ul><li>指定要用作目标分区的文件系统的文件系统。</li><li>目前支持：FAT（默认）/ NTFS。</li></ul><pre><code>--target-filesystem， - ttt -fs &lt;filesystem name&gt;</code></pre><hr><h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><hr><ul><li><a href="https://github.com/slacka/WoeUSB" target="_blank" rel="noopener">https://github.com/slacka/WoeUSB</a></li></ul>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux SVN 命令行</title>
      <link href="/2018/07/18/Linux%20SVN%20%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2018/07/18/Linux%20SVN%20%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<ul><li>Apache Subversion（简称SVN），一个开放源代码的版本控制系統。</li></ul><hr><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li>这里记录下自己遇到的问题，为了避免下次重蹈覆辙，也为了自己再次查询方便。</li></ul><hr><h1 id="几个常用shell命令"><a href="#几个常用shell命令" class="headerlink" title="几个常用shell命令"></a>几个常用shell命令</h1><pre><code class="shell">SVN 批量添加文件:svn st | awk &#39;{if ($1 == &quot;?&quot;) {print $2} }&#39; | xargs svn addSVN 批量删除文件:svn st | awk &#39;{if ($1 == &quot;!&quot;) {print $2} }&#39; | xargs svn del</code></pre><hr><h3 id="1、将文件checkout到本地目录"><a href="#1、将文件checkout到本地目录" class="headerlink" title="1、将文件checkout到本地目录"></a>1、将文件checkout到本地目录</h3><pre><code>svn checkout path（path是服务器上的目录）例如：svn checkout https://192.168.1.1/pro/domain简写：svn co</code></pre><h3 id="2、往版本库中添加新的文件"><a href="#2、往版本库中添加新的文件" class="headerlink" title="2、往版本库中添加新的文件"></a>2、往版本库中添加新的文件</h3><pre><code>svn add file例如：svn add test.php(添加test.php)svn add *.php(添加当前目录下所有的php文件)</code></pre><h3 id="3、将改动的文件提交到版本库"><a href="#3、将改动的文件提交到版本库" class="headerlink" title="3、将改动的文件提交到版本库"></a>3、将改动的文件提交到版本库</h3><pre><code>svn commit -m “LogMessage“ [-N] [--no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)例如：svn commit -m “add test file for my test“ test.php简写：svn ci</code></pre><h3 id="4、加锁-解锁"><a href="#4、加锁-解锁" class="headerlink" title="4、加锁/解锁"></a>4、加锁/解锁</h3><pre><code>svn lock -m “LockMessage“ [--force] PATH例如：svn lock -m “lock test file“ test.phpsvn unlock PATH</code></pre><h3 id="5、更新到某个版本"><a href="#5、更新到某个版本" class="headerlink" title="5、更新到某个版本"></a>5、更新到某个版本</h3><pre><code>svn update -r m path例如：svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)简写：svn up</code></pre><h3 id="6、查看文件或者目录状态"><a href="#6、查看文件或者目录状态" class="headerlink" title="6、查看文件或者目录状态"></a>6、查看文件或者目录状态</h3><pre><code>svn status path（目录下的文件和子目录的状态，正常状态不显示）【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】svn status -v path(显示文件和子目录状态)第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。简写：svn st</code></pre><h3 id="7、删除文件"><a href="#7、删除文件" class="headerlink" title="7、删除文件"></a>7、删除文件</h3><pre><code>svn delete path -m “delete test fle“例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种简写：svn (del, remove, rm)</code></pre><h3 id="8、查看日志"><a href="#8、查看日志" class="headerlink" title="8、查看日志"></a>8、查看日志</h3><pre><code>svn log path例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化</code></pre><h3 id="9、查看文件详细信息"><a href="#9、查看文件详细信息" class="headerlink" title="9、查看文件详细信息"></a>9、查看文件详细信息</h3><pre><code>svn info path例如：svn info test.php</code></pre><h3 id="10、比较差异"><a href="#10、比较差异" class="headerlink" title="10、比较差异"></a>10、比较差异</h3><pre><code>svn diff path(将修改的文件与基础版本比较)例如：svn diff test.phpsvn diff -r m:n path(对版本m和版本n比较差异)例如：svn diff -r 200:201 test.php简写：svn di</code></pre><h3 id="11、将两个版本之间的差异合并到当前文件"><a href="#11、将两个版本之间的差异合并到当前文件" class="headerlink" title="11、将两个版本之间的差异合并到当前文件"></a>11、将两个版本之间的差异合并到当前文件</h3><pre><code>svn merge -r m:n path例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</code></pre><h3 id="12、SVN-帮助"><a href="#12、SVN-帮助" class="headerlink" title="12、SVN 帮助"></a>12、SVN 帮助</h3><pre><code>svn helpsvn help ci</code></pre><h3 id="13、版本库下的文件和目录列表"><a href="#13、版本库下的文件和目录列表" class="headerlink" title="13、版本库下的文件和目录列表"></a>13、版本库下的文件和目录列表</h3><pre><code>svn list path显示path目录下的所有属于版本库的文件和目录简写：svn ls</code></pre><h3 id="14、创建纳入版本控制下的新目录"><a href="#14、创建纳入版本控制下的新目录" class="headerlink" title="14、创建纳入版本控制下的新目录"></a>14、创建纳入版本控制下的新目录</h3><pre><code>svn mkdir: 创建纳入版本控制下的新目录。用法: mkdir PATH…mkdir URL…创建版本控制的目录。每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。每个以URL指定的目录，都会透过立即提交于仓库中创建。在这两个情况下，所有的中间目录都必须事先存在</code></pre><h3 id="15、恢复本地修改"><a href="#15、恢复本地修改" class="headerlink" title="15、恢复本地修改"></a>15、恢复本地修改</h3><pre><code>svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:用法: revert PATH…注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。</code></pre><h3 id="16、代码库URL变更"><a href="#16、代码库URL变更" class="headerlink" title="16、代码库URL变更"></a>16、代码库URL变更</h3><pre><code>svn switch (sw): 更新工作副本至不同的URL。用法:switch URL [PATH]switch –relocate FROM TO [PATH...]更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。</code></pre><h3 id="17、解决冲突"><a href="#17、解决冲突" class="headerlink" title="17、解决冲突"></a>17、解决冲突</h3><pre><code>svn resolved: 移除工作副本的目录或文件的“冲突”状态。用法: resolved PATH…注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。</code></pre><hr><p><br></p><h1 id="参考-鸣谢"><a href="#参考-鸣谢" class="headerlink" title="参考-鸣谢"></a>参考-鸣谢</h1><hr><ul><li><a href="https://tortoisesvn.net/support.html" target="_blank" rel="noopener">https://tortoisesvn.net/support.html</a></li><li><a href="https://www.cnblogs.com/snandy/p/4072857.html" target="_blank" rel="noopener">https://www.cnblogs.com/snandy/p/4072857.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在局域网内快速共享文件</title>
      <link href="/2018/04/19/%E5%9C%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E5%BF%AB%E9%80%9F%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
      <url>/2018/04/19/%E5%9C%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E5%BF%AB%E9%80%9F%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>接入网络，与其他参与者交换文件。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><ul><li><p>本文将介绍两种局域网内快速共享文件的方式，分别为 <strong>通过Python</strong> 和 <strong>通过共享工具</strong>  。</p><ul><li><p>只要安装Python就可以轻松的完成共享。</p></li><li><p>woof 是一个小巧且快速的局域网文件共享工具。</p></li></ul></li></ul><hr><h1 id="1-使用Python"><a href="#1-使用Python" class="headerlink" title="1.使用Python"></a>1.使用Python</h1><ul><li>默认你已经安装了Python，如果没有安装，请使用适合的包管理器自行安装。</li></ul><h2 id="通过http方式共享"><a href="#通过http方式共享" class="headerlink" title="通过http方式共享"></a>通过http方式共享</h2><ul><li><p>进入到你想共享的目录中后，打开终端输入以下命令。</p></li><li><p>python2</p></li></ul><pre><code class="python">python -m SimpleHTTPServer 8080</code></pre><ul><li>python3</li></ul><pre><code class="python">python -m http.server 8080</code></pre><h2 id="通过FTP方式共享"><a href="#通过FTP方式共享" class="headerlink" title="通过FTP方式共享"></a>通过FTP方式共享</h2><ul><li>首先安装第三方库</li></ul><pre><code class="python">pip install pyftpdlib</code></pre><ul><li>共享命令：</li></ul><pre><code class="python">python -m pyftpdlib -p 8080</code></pre><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><ul><li>可在浏览器下使用，输入 <strong><a href="http://0.0.0.0:8080" target="_blank" rel="noopener">http://0.0.0.0:8080</a></strong> 即可。</li></ul><hr><h1 id="2-下载安装woof"><a href="#2-下载安装woof" class="headerlink" title="2.下载安装woof"></a>2.下载安装woof</h1><ul><li>终端输入：</li></ul><pre><code>sudo apt-get install woof或是yaourt -S woof</code></pre><h1 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h1><ul><li>安装完毕后，打开终端。</li></ul><blockquote><p>这里假如我要通过 <strong>8000端口</strong> 发送一个文件 <strong>x</strong>，这个文件的路径是 ~/dist/x</p></blockquote><ul><li>终端输入：</li></ul><pre><code>sudo woof -p 8000 ~/dist/x</code></pre><ul><li>将会显示如下地址：</li></ul><pre><code>Now serving on http://172.168.1.102:8000/x</code></pre><ul><li>在浏览器中输入地址 <code>http://172.168.1.102:8000/x</code> 就可以下载文件了。</li></ul><h1 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h1><pre><code>woof [-i &lt;ip_addr&gt;] [-p &lt;port&gt;] [-c &lt;count&gt;] &lt;file&gt;woof [-i &lt;ip_addr&gt;] [-p &lt;port&gt;] [-c &lt;count&gt;] [-z|-j|-Z|-u] &lt;dir&gt;woof [-i &lt;ip_addr&gt;] [-p &lt;port&gt;] [-c &lt;count&gt;] -swoof [-i &lt;ip_addr&gt;] [-p &lt;port&gt;] [-c &lt;count&gt;] -Uwoof &lt;url&gt;-i：指定地址。-p：指定端口。-c：指定服务文件次数，默认为仅1。-s：当指定-s而不是文件名时，woof会自行分配。-U：当指定-U时，woof提供上传表单，允许上传文件。-z|-j|-Z|-u：默认是gzip压缩的。您可以指定-z进行gzip压缩，-j用于bzip2压缩，-Z用于ZIP压缩或-u用于不压缩。</code></pre><ul><li>您可以在配置中配置默认​​的压缩方法。</li></ul><ul><li>可以在两个位置指定不同的默认值：<code>/ etc / woofrc</code> 或 <code>〜/ .woofrc</code> 可以是包含默认值的INI风格的配置文件端口和默认计数。主目录中的文件需要优先。压缩方法是“off”，“gz”，“bz2”或“zip”。</li></ul><ul><li>示例：</li></ul><pre><code>[main]port = 8008count = 2ip = 127.0.0.1compressed = gz</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.home.unix-ag.org/simon/woof.html" target="_blank" rel="noopener">http://www.home.unix-ag.org/simon/woof.html</a></li><li><a href="https://docs.python.org/2/library/simplehttpserver.html" target="_blank" rel="noopener">https://docs.python.org/2/library/simplehttpserver.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>国际版 MIUI</title>
      <link href="/2018/03/27/%E5%9B%BD%E9%99%85%E7%89%88%20MIUI/"/>
      <url>/2018/03/27/%E5%9B%BD%E9%99%85%E7%89%88%20MIUI/</url>
      <content type="html"><![CDATA[<p>将我的红米5Plus系统刷为国际版。</p><p>折腾了1天半，总算找到了自已较为满意的版本。在此将过程记录下来。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p>值得注意的是整个过程需要 <strong>Windows</strong> 环境。</p><blockquote><p>更要注意的是：<strong>备份重要数据</strong>。</p></blockquote></blockquote><ol><li><p>申请解锁。<a href="http://www.miui.com/unlock/index.html" target="_blank" rel="noopener">点击这里</a>，申请小米账号解锁权限，登录你的小米账号提交申请。</p></li><li><p>申请成功后，同页面下载小米解锁工具。</p></li><li><p><a href="https://www.androidfilehost.com/?w=files&amp;flid=50678" target="_blank" rel="noopener">点击这里</a>，下载 <strong>fastboot mode</strong> ——<strong>TWRP Recovery</strong>。</p></li><li><p><a href="https://xiaomi.eu/community/forums/miui-weekly-rom-releases.103/" target="_blank" rel="noopener">点击这里</a> 下载ROM，我使用的是EU版。选择你对应的机型进行下载。有开发版和稳定版可以选择。</p></li></ol><blockquote><p>EU版是国际版的欧洲优化版本。为什么我选择了它，文章的最后我会写上。</p></blockquote><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li><p>关机；同时按住 <strong>电源键 + 音量 -</strong> ，进入<code>fastboot</code>模式。</p></li><li><p>将手机连接电脑，打开小米解锁工具，登录账号，一路同意协议后，点击 <strong>开始解锁</strong>。</p></li><li><p><strong>进入</strong> 下载好的 <strong>TWRP Recovery</strong> 文件夹中，打开命令行，依次输入：</p></li></ol><pre><code>fastboot flash recovery twrp.imgfastboot boot twrp.img</code></pre><ol><li><p>成功后手机会自动进入 <strong>TWRP</strong> ，此时会提示输入密码，也可以点击 <strong>Cancel</strong> 跳过。</p></li><li><p>点击 <strong>Setting</strong> 按钮，更改语言为简体中文，方便操作。</p></li><li><p>点击清除，清除数据。</p></li><li><p>点击 <strong>挂载</strong> ，选中 <strong>Micro SD</strong> 。</p></li><li><p>打开 <strong>我的电脑</strong> 进入设备， <strong>复制</strong>  刚刚ROM包。</p></li><li><p>手机点击 <strong>安装</strong> 按钮，选中复制好的 <strong>ROM包</strong> 进行安装。<br><br></p><blockquote><p><strong>如果显示ROM包损坏请回头检查：复制、下载 过程。</strong></p></blockquote></li></ol><ul><li>成功后点击 <strong>重启系统</strong>。</li><li>第一次启动系统时间较长，大概需要20分钟左右。</li></ul><p><br></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>第一次刷入的是 <strong>国际稳定版</strong> ，很顺利但是版本回滚太严重，相较于 <strong>国内稳定版</strong> 缺少了很多新功能，例如 <strong>全面屏手势操作</strong> ，并且无法自动校正流量信息。</p></li><li><p>之后果断刷入 <strong>国际开发版</strong> ，但是由于不能跳过验证Google账号，也就不能进入系统，尝试多种办法无果后最终选择了 <strong>EU开发版 MIUI</strong> 。</p></li><li><p>相较于国际版，EU开发版能跳过开头的Google验证，少了谷歌全家桶，也能校正流量。</p></li></ul><hr><p><br></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://xiaomi.eu" target="_blank" rel="noopener">https://xiaomi.eu</a></li></ul>]]></content>
      
      <categories>
          
          <category> 记录集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Manjaro Linux 系统主题色配置</title>
      <link href="/2018/03/20/Arch%20Linux%20%E7%B3%BB%E7%BB%9F%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/03/20/Arch%20Linux%20%E7%B3%BB%E7%BB%9F%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>干掉讨厌的暗黑主题色。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li><p>自从装了Manjaro，发现整体的风格过于偏暗，本来以为仅仅是Gnome桌面的设置问题，结果并没有那么简单，一些使用<code>Qt框架</code>的软件背景仍是暗色。</p></li><li><p>查阅wiki后我意识到是Gt风格的影响。</p></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li><p>安装 <code>Qt风格设置</code></p><pre><code>sudo pacman -S  qt5-styleplugins qt5ct</code></pre></li><li><p>终端输入 <code>qt5ct</code>，而后 <strong>更改</strong>  <code>外观</code>&gt;<code>风格</code>，点击 <code>应用</code>，重启应用就可以生效了。</p></li></ul><blockquote><p>到这一步，基本已经解决了一些软件因为基于Qt风格而产生的黑白违和问题。</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="使用-dconf管理器-自定义主题色。"><a href="#使用-dconf管理器-自定义主题色。" class="headerlink" title="使用 dconf管理器 自定义主题色。"></a>使用 dconf管理器 自定义主题色。</h3><ul><li><p>安装并打开 <strong>dconf editor</strong></p><pre><code>sudo pacman -S dconf editor</code></pre></li><li><p>进入 <strong>org/gnome/desktop/interface</strong></p></li><li><p>找到 <code>gtk-color-scheme</code> 自定义颜色.</p></li></ul><pre><code>参数如下：fg_color:前景色的基础。bg_color:颜色从中生成背景颜色。base_color:基本颜色。text_color:输入小部件中的文本颜色。selected_bg_color:所选文本背景的颜色。selected_fg_color:选定文本的颜色。tooltip_bg_color:工具提示的背景颜色。tooltip_fg_color:工具提示中文本的文本颜色。</code></pre><ul><li>书写格式为： <code>参数:#******;</code>  例如：</li></ul><pre><code>bg_color:#CCE8CF;base_color:#CCE8CF</code></pre><blockquote><p><strong>注意</strong>：设置的时候下面的描述信息可能为A ‘\n’ separated list of “name:color” as defined by the ‘gtk-color-scheme’ setting，这里需要注意的是使用英文的”;”而不是”\n”。</p></blockquote><h2 id="几种护眼色"><a href="#几种护眼色" class="headerlink" title="几种护眼色"></a>几种护眼色</h2><table><tr><td bgcolor="#FFFFFF">银河白    #FFFFFF   RGB(255, 255, 255)</td></tr><tr><td bgcolor="#FAF9DE">杏仁黄    #FAF9DE   RGB(250, 249, 222)</td></tr><tr><td bgcolor="#FFF2E2">秋叶褐    #FFF2E2   RGB(255, 242, 226)</td></tr><tr><td bgcolor="#FDE6E0">胭脂红    #FDE6E0   RGB(253, 230, 224)</td></tr><tr><td bgcolor="#E3EDCD">青草绿    #E3EDCD   RGB(227, 237, 205)</td></tr><tr><td bgcolor="#DCE2F1">海天蓝    #DCE2F1   RGB(220, 226, 241)</td></tr><tr><td bgcolor="#E9EBFE">葛巾紫    #E9EBFE   RGB(233, 235, 254)</td></tr><tr><td bgcolor="#EAEAEF">极光灰    #EAEAEF   RGB(234, 234, 239)</td></tr></table><p><br></p><h1 id="参考-鸣谢"><a href="#参考-鸣谢" class="headerlink" title="参考-鸣谢"></a>参考-鸣谢</h1><ul><li><a href="https://wiki.archlinux.org/index.php/Uniform_look_for_Qt_and_GTK_applications" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Uniform_look_for_Qt_and_GTK_applications</a></li><li><a href="http://blog.csdn.net/zhengqiqiqinqin/article/details/8175893" target="_blank" rel="noopener">http://blog.csdn.net/zhengqiqiqinqin/article/details/8175893</a></li></ul>]]></content>
      
      <categories>
          
          <category> 优化翩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改 Gnome 3 Night-light 强度值</title>
      <link href="/2018/03/19/%E4%BF%AE%E6%94%B9-Gnome-3-Night-light-%E5%BC%BA%E5%BA%A6%E5%80%BC/"/>
      <url>/2018/03/19/%E4%BF%AE%E6%94%B9-Gnome-3-Night-light-%E5%BC%BA%E5%BA%A6%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>使用 Night-light 以减少屏幕蓝光对眼睛的影响。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li><p>尤其是在夜晚，护眼模式的作用显而易见，合理、科学的使用能有效舒缓屏幕对眼睛的伤害,并让你的屏幕更加温和。</p></li><li><p>实现该功能的原理是改变屏幕色温，减少蓝光对眼睛的影响。</p></li><li><p><strong>我在使用的时候遇到了一些问题，就是色温调节过度，使得整个界面<code>过于偏红</code>。</strong></p></li></ul><ul><li>去查阅了不少资料，终于在一篇英文文献中找到了解决办法，现在把它写下来，填上这个坑。</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>我们可以通过改变<code>gsettings</code>中的强度值来控制<code>Gnome 3</code> Night light Intensity（微红色调）。</li></ul><ul><li>为此我们安装<code>dconf编辑器</code>。</li></ul><ol><li>Ubuntu：<pre><code>sudo apt-get install dconf-editor</code></pre></li><li>Arch linux：<pre><code>sudo pacman -S dconf-editor</code></pre></li><li>对于其他发行版本，使用相对应的软件安装命令。</li></ol><h2 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h2><ul><li>打开刚刚安装的<code>dconf编辑器</code>。</li></ul><ul><li>选择对应位置：</li></ul><pre><code>org &gt; Gnome &gt; settings-daemon &gt; plugins &gt; color &gt; night-light-temperature</code></pre><ul><li>关闭默认值并在下面给出的框中输入自定义值。</li></ul><p><img src="/img/imgQ/gnome.png" alt="SZ"></p><h3 id="温度值："><a href="#温度值：" class="headerlink" title="温度值："></a>温度值：</h3><blockquote><ul><li>1000最低值（全红）</li><li>4000默认夜间照明温度</li><li>5500更好，不太强烈的夜间温度</li><li>6500默认温度（夜灯关闭）</li><li>10000最高值（全蓝） </li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>推荐使用5500左右的温度值，但仍以你的个人感受为准。</p></li><li><p>虽然该功能有效的舒缓了你的眼睛，但仍不能完全抵御屏幕对你健康的损害，请注意休息。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://smashingweb.info/gnome-3-night-light-intensity/" target="_blank" rel="noopener">http://smashingweb.info/gnome-3-night-light-intensity/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 优化翩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>oh-my-zsh + zsh 强大的终端环境</title>
      <link href="/2018/03/14/oh-my-zsh-%E9%85%8D%E7%BD%AEzsh-%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/03/14/oh-my-zsh-%E9%85%8D%E7%BD%AEzsh-%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>人生苦短，我用zsh.</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>zsh 是一个强大的 bash 替代，而 oh-my-zsh 是 zsh 的一键式配置工具，尤其是配合一些插件，功能强大，好用又便捷。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>我们看一下系统内置了几种shell：</li></ul><pre><code class="yaml">cat /etc/shells## /etc/shells#/bin/sh/bin/bash</code></pre><ul><li>我的电脑现在仅仅只有2种；<code>sh</code>和<code>bash</code>。</li></ul><blockquote><ol><li>当然如果你使用的是Mac，你会发现多了一个zsh，也就是说OSX系统预装了zsh。<br></li><li>目前大部分的Linux和OSX系统默认使用bash；其实真正强大的shell是深藏不漏的zsh，史称<code>终极Shell</code>，但是由于配置过于复杂，很多人看了几分钟的zsh使用指南，什么都没说直接关了网页走了。直到有一天，oh-my-zsh被一个程序员做了出来，速成突然变成了可能。</li></ol></blockquote><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><ul><li>Ubuntu用户可以在终端运行：</li></ul><pre><code>sudo apt-get install zsh zsh-completions</code></pre><ul><li>使用pacman包管理器的用户可以：</li></ul><pre><code>sudo pacman -S zsh zsh-completions</code></pre><ul><li>zsh-completions 包是用以增强zsh的补全功能。</li><li>mac系统下无需安装。</li></ul><hr><h3 id="下载oh-my-zsh"><a href="#下载oh-my-zsh" class="headerlink" title="下载oh-my-zsh"></a>下载oh-my-zsh</h3><ul><li>curl 安装：</li></ul><pre><code class="shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></pre><ul><li>weget 安装：</li></ul><pre><code class="shell">sh -c &quot;$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></pre><ul><li>选择以上方式的其中一种，执行后自动读取系统环境变量并自动进行zsh配置。</li></ul><blockquote><p>切换到zsh</p></blockquote><pre><code>chsh -s /usr/local/bin/zsh</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>zsh配置文件在用户当前目录下的<code>.zshrc</code>中，打开它：</li></ul><pre><code>vim ～/.zshrc</code></pre><ul><li>我们可以修改这个参数来自定义主题</li></ul><pre><code>ZSH_THEME=&quot;robbyrussell&quot;   </code></pre><ul><li>robbyrussell 是主题名。&gt;可挑选你喜欢的主题。</li></ul><h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><blockquote><p>在<code>.zshrc</code>文件中加入插件的名字，即可启动插件：</p></blockquote><pre><code>plugins=( [plugins...] ) </code></pre><ul><li>cp：显示复制进度。</li><li>git：默认开启的插件，提供了大量 git 的alias。<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git。" target="_blank" rel="noopener">详情</a></li><li>extract:功能强大的解压插件，所有类型的文件解压一个命令<code>x</code>全搞定，再也不需要去记tar后面到底是哪几个参数了。</li><li>z：强大的目录自动跳转命令，会记忆你曾经进入过的目录，用模糊匹配快速进入你想要的目录。</li></ul><hr><h3 id="一些实用的，非自带插件"><a href="#一些实用的，非自带插件" class="headerlink" title="一些实用的，非自带插件"></a>一些实用的，非自带插件</h3><ul><li><code>zsh-syntax-highlighting</code>：高亮你的zsh命令，正确显示绿色，错误显示红色。</li></ul><pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></pre><ul><li><code>zsh-autosuggestions</code>:自动匹配你历史的输入命令。</li></ul><pre><code>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></pre><ul><li><p>同样在<code>.zshrc</code> 文件中加入 <code>plugins=(... zsh-syntax-highlighting zsh-autosuggestions)</code></p></li><li><p>保存退出，并运行<code>source ./zshrc</code>，更新一下zsh，当然你也可以重新打开命令行，就可以享受zsh给你带来的便捷了。</p></li></ul><h2 id="设置命令别名，让输入更便捷"><a href="#设置命令别名，让输入更便捷" class="headerlink" title="设置命令别名，让输入更便捷"></a>设置命令别名，让输入更便捷</h2><ul><li><p>还是找到zsh的配置文件<code>.zshrc</code>，（～/.zshrc），添加命令别名：</p><blockquote><p>例如：<code>alias install=&quot;sudo apt-get install&quot;</code></p></blockquote></li><li><p>应用配置文件，使配置生效 <code>source ～/.zshrc</code></p></li><li>查看当前shell现有别名，终端下输入：</li></ul><pre><code>➜  ~ alias </code></pre><ul><li>Bash 里一些常用的别名：</li></ul><pre><code>alias la=&#39;ls -Fa&#39;          # 列出所有文件alias ll=&#39;ls -Fls&#39;         # 列出文件详细信息alias rm=&#39;rm -i&#39;           # 删除前需确认alias cp=&#39;cp -i&#39;           # 覆盖前需确认alias mv=&#39;mv -i&#39;           # 覆盖前需确认alias vi=&#39;vim&#39;             # 输入 vi 命令时使用 vim 编辑器</code></pre><h1 id="参考-鸣谢"><a href="#参考-鸣谢" class="headerlink" title="参考-鸣谢"></a>参考-鸣谢</h1><hr><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></li><li><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">http://macshuo.com/?p=676</a></li><li><a href="https://wiki.archlinux.org/index.php/Zsh" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Zsh</a></li><li><a href="https://xiaotaoist.github.io" target="_blank" rel="noopener">https://xiaotaoist.github.io</a></li><li><a href="http://blog.csdn.net/u012801337/article/details/47132501" target="_blank" rel="noopener">http://blog.csdn.net/u012801337/article/details/47132501</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拥抱Disqus</title>
      <link href="/2018/03/12/%E6%8B%A5%E6%8A%B1Disqus/"/>
      <url>/2018/03/12/%E6%8B%A5%E6%8A%B1Disqus/</url>
      <content type="html"><![CDATA[<p>评论系统是互动不可缺少的一部分，沟通同样也是桥梁。为博客搭建一个可靠的评论系统，我选择了Disqus。</p><hr><h1 id="申请Disqus账号"><a href="#申请Disqus账号" class="headerlink" title="申请Disqus账号"></a>申请Disqus账号</h1><ul><li>点击<a href="https://disqus.com/" target="_blank" rel="noopener">这里</a>进入Disqus的官网，注册登录，这里可以选择Facebook、Twitter账号的快速登录，当然你同样可以使用邮箱注册登录。</li></ul><h2 id="配置Disqus"><a href="#配置Disqus" class="headerlink" title="配置Disqus"></a>配置Disqus</h2><ul><li>登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项。</li></ul><ol><li><p><code>Websit Name</code> 就是 short name 自己填写,这个在配置 Hexo 的时候需要用到。</p></li><li><p><code>Category</code> 选择种类，可以随便选<br></p></li><li><p><code>Language</code> 语言选 Chinese 或者 English <br></p></li><li><p>点击<code>Create Site</code> 等待界面跳转。<br></p></li><li><p>接下来在页面的左侧点击 Configure Disqus<br></p></li></ol><ul><li>在<code>Website URL</code> 那里填写自己的博客地址，Description 可以不写，然后点 <code>Complete Setup</code>，Disqus 基本的设置就完成了。</li></ul><h1 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h1><ul><li>在<strong>主题配置文件</strong>中，填写 <code>comment: use:</code>字段，值设置为 <code>disqus</code> 或 <code>disqus_click。</code></li></ul><blockquote><p>使用<code>Disqus_Click</code> 时，文章页面不会主动加载<code>Disqus</code> 评论，直到按下按钮。这项设置有助于改善浏览者的体验。</p></blockquote><ul><li>在 <code>comment: shortname:</code>填入你的 <code>Disqus shortname</code></li></ul><hr><ul><li>需要注意的是此处的 <code>shortname</code>不是你的登录的 id，是你的评论二级域名去掉 <code>.duoshuo.com</code> 或 <code>.disqus.com</code>部分.</li></ul><blockquote><p>例如：Disqus 域名 example.disqus.com</p></blockquote><p>则输入：</p><pre><code>shortname: example</code></pre><hr><p>然后执行:</p><pre><code>$ hexo clean$ hexo g &amp;&amp; hexo s</code></pre><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><hr><ul><li><a href="https://www.jianshu.com/p/c4f65ebe23ad" target="_blank" rel="noopener">https://www.jianshu.com/p/c4f65ebe23ad</a></li><li><a href="https://material.viosey.com/docs/#/" target="_blank" rel="noopener">https://material.viosey.com/docs/#/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为Hexo优化</title>
      <link href="/2018/03/08/%E4%B8%BAHexo%E4%BC%98%E5%8C%96/"/>
      <url>/2018/03/08/%E4%B8%BAHexo%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>搭建完基本的框架，来为自己博客的美观和便捷性，做点功课。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>在本文中，假定你已经成功安装了 Hexo，并根据 Hexo 的文档创建了一个站点，并完成了基本的设置。</p></blockquote><ul><li>在 Hexo 中，通常有两份配置文件，一个是站点根目录下的 <code>_config.yaml</code>；另外一个是主题目录下的<code>_config.yaml</code>。 为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</li></ul><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><ul><li>在Hexo框架下更换主题变得异常简单，只要将主题文件下载并且放置到<strong>站点目录</strong>的<code>themes</code>文件夹下，然后修改一下配置文件即可。你可以从Github上找到这些<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">主题</a>。</li></ul><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><ul><li>克隆完成后，修改主题文件夹名称，将其自定义为 <code>***</code>。 然后打开 站点配置文件，找到 <code>theme</code>字段，并将其值更改为 <code>***</code> 。</li></ul><blockquote><p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code>字段与之对应即可。</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><hr><ul><li>为防止造成冲突，主题以<code>_config.template.yaml</code>文件取代<code>_config.yaml</code>文件，用以参考配置。 需要手动将 <code>material</code> 文件夹中的 <code>_config.template.yaml</code>复制一份并重命名为<code>_config.yaml</code>。</li></ul><hr><h2 id="主题基本配置"><a href="#主题基本配置" class="headerlink" title="主题基本配置"></a>主题基本配置</h2><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><ul><li>编辑 <strong>站点配置文件</strong>，将 <code>language</code>设置成你所需要的语言。</li></ul><blockquote><p>例如：选用简体中文，则配置为：</p><pre><code>language: zh-CN</code></pre></blockquote><h2 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h2><p> <strong>用于配置生成的 HTML 文件的头部信息。</strong></p><ul><li><code>favicon</code>: 网站的 favicon</li><li><code>high_res_favicon</code>: 高清 favicon</li><li><code>keywords</code>: 网站关键词</li><li><code>site_verification</code>: 搜索引擎验证</li></ul><h1 id="更方便的与Github关联"><a href="#更方便的与Github关联" class="headerlink" title="更方便的与Github关联"></a>更方便的与Github关联</h1><ul><li>使用 ssh实现与github的免密上传。</li></ul><hr><h2 id="生成ssh的密钥文件"><a href="#生成ssh的密钥文件" class="headerlink" title="生成ssh的密钥文件"></a>生成ssh的密钥文件</h2><p>在命令行中输入</p><pre><code>ssh-keygen -t ecdsa -b 256 -C &quot;your_email@example.com&quot;</code></pre><ul><li>这行命令将会生成一个以<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>为标签的ssh key，接着bash会显示：</li></ul><pre><code>Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</code></pre><ul><li>如果想要为私钥设置密码，请设置密码，如果不想设置则直接回车然后出现：</li></ul><pre><code>Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again]</code></pre><ul><li>再次确认你的密码，或两次回车设置为空</li></ul><blockquote><p>ssh-keygen 有如几种参数： <br>1. -t 为指定加密算法类型，支持rsa，dsa，ecdsa。<br>2. -b 指定密钥大小。<br>3. -f 指定生成密钥保存位置与名称。 <br>4. -C 添加注释。默认为本机主机名和用户。</p></blockquote><h2 id="将ssh-Key-添加到github上"><a href="#将ssh-Key-添加到github上" class="headerlink" title="将ssh Key 添加到github上"></a>将ssh Key 添加到github上</h2><ol><li>将本地生成的公钥 <code>id_rsa.pub</code>中的内容复制下来。<br>2.打开<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>  并且登录，点击Add ssh Key，将复制的内容粘贴到Key框中，在Title框中可以输入自己方便记忆的名字。</li><li>当网页显示添加成功后，打开命令行输入</li></ol><pre><code>ssh ‐T git@github.com</code></pre><ol><li>命令行出现以下回执：<code>Are you sure you want to continue connecting (yes/no)?</code></li><li>输入yes后如果看到:</li></ol><pre><code>Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><ol><li>成功显示如上文字就说明成功了，如果出现错误提示请仔细检查自己的操作。</li></ol><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>修改<strong>站点配置文件</strong>，中的<code>_config.yml</code>，将部署方式从https方式修改为ssh方式。<pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepository: https://github.com/minifullc/minifullc.github.io.gitbranch: master</code></pre></li></ul><ul><li>修改为:</li></ul><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:MiniFullC/MiniFullC.github.io.git  branch: master</code></pre><p>  <br></p><p>  参考</p><hr><ul><li><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands.html</a></li><li><a href="https://xiaotaoist.github.io/" target="_blank" rel="noopener">https://xiaotaoist.github.io/</a></li><li><a href="https://material.viosey.com/docs/#/" target="_blank" rel="noopener">https://material.viosey.com/docs/#/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用Hexo+Github 搭建博客</title>
      <link href="/2018/03/07/Hexo+Github%20%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/03/07/Hexo+Github%20%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>万事开头难，第一次总是让人既困惑又欣喜。踏出第一步，远比空想有意义的多。</p><h1 id="始建之初"><a href="#始建之初" class="headerlink" title="始建之初"></a>始建之初</h1><hr><p>搭建博客的想法来自于一个朋友的鼓舞，谨以本文来记念这次“美好的旅程”。本人利用Github+Hexo来搭建了这个博客，在此过程中无论是环境搭建还是功能配置都占据了我不少的时间，踩中了不少坑，希望本文能做个好的开始，并记录下中过程中遇到的相关问题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>下载node.js，npm 并安装。</li><li>下载git。</li></ul><ol><li>在Ubuntu下可以打开终端输入：</li></ol><pre><code>sudo apt-get install nodejs npm git</code></pre><ol><li>使用Arch Linux用户可以输入：</li></ol><pre><code>pacman -S nodejs npm gitsudo yaourt -S node js npm git</code></pre><ol><li>值得一提的是，如果你的Linux在安装npm 时出现依赖问题</li></ol><blockquote><p>Windows 用户可自行搜索安装。</p></blockquote><h2 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h2><ul><li>在终端下，输入 <strong>node -v</strong> ， <strong>npm -v</strong> ，<strong>git –version</strong></li><li>如果都成功显示版本号，则说明安装正确，可以进行下一步操作了，如果不正确，请回头检查安装过程。</li></ul><h2 id="在本地搭建hexo博客"><a href="#在本地搭建hexo博客" class="headerlink" title="在本地搭建hexo博客"></a>在本地搭建hexo博客</h2><ul><li>新建一个文件夹，自定义文件夹的名称，如 Blog。</li><li>在命令行中 输入：</li></ul><pre><code>npm install hexo-cli -g</code></pre><ul><li>回车后会出现<code>WARN</code>，不用担心不会影响使用。</li><li>接下在你就会看到命令行窗口刷下了一大堆白字，下面我们来看一看Hexo是不是已经安装成功了。在命令行中输入：</li></ul><pre><code>hexo -v</code></pre><ul><li>如果成功显示Hexo的版本信息并且识别成功了你的本地计算机配置，则说明已经安装成功了。</li></ul><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><ul><li>成功安装Hexo后，进入刚才新建的文件夹 Blog，在命令行中输入：</li></ul><pre><code>hexo init</code></pre><ul><li>紧接着输入：</li></ul><pre><code>npm install</code></pre><ul><li>之后npm将自动安装所需要的组件，这需要点时间，耐心等一会哦。</li><li>当组件安装完成后，连续输入两行指令：</li></ul><pre><code>hexo ghexo s</code></pre><ul><li>然后会提示一行指令：</li></ul><pre><code>INFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><ul><li>在浏览器中打开这个链接：<code>http://localhost:4000/</code>，成功显示Hexo的默认模板。</li><li>到目前为止，Hexo在本地的配置已经全都结束了。</li></ul><hr><h2 id="将本地博客与Github关联"><a href="#将本地博客与Github关联" class="headerlink" title="将本地博客与Github关联"></a>将本地博客与Github关联</h2><ul><li>在Github上创建名字为xxx.github.io的项目，XXX是自己GIthub的用户名。</li><li>打开本地的Blog文件夹内的<em>_config.yml</em> 配置文件，将其中的type设置为git，并且在<em>repository：</em> 后写上自己Github的项目地址。</li></ul><pre><code>deploy:type: gitrepository: https://github.com/MiniFullC/MiniFullC.github.io.gitbranch: master</code></pre><ul><li>保存后运行：<em>npm install hexo-deployer-git –save</em></li><li>运行：<em>hexo g</em> （生成本地静态文件）</li><li>运行：<em>hexo d</em> （将本地静态文件推送到Github上）</li><li>此时hexo将会自动将本地的文件向github提交请求，接下来就会让你输入你github上的帐号和密码，输入正确后就会开始同步。</li></ul><h2 id="查看自己的博客"><a href="#查看自己的博客" class="headerlink" title="查看自己的博客"></a>查看自己的博客</h2><ul><li>上面你已经在github上按照规范输入了博客地址，<code>xxx.github.io</code>，这就是你的主页啦，基本的配置和上传已经成功了，接下来就来写一篇自己的博文吧！</li></ul><hr><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><ul><li>打开Hexo目录，找到<code>source</code>文件夹，所有的文章都会以Markdown形式保存在<code>_post</code>文件夹中。</li><li>好了知道了文章的存储地点那么如何快速的新建一个文章呢？</li><li>在Hexo站点目录下右键打开命令行，输入 </li></ul><pre><code>hexo new “***”</code></pre><ul><li>***是你自定义文章的名字我们发现站点根目录下的<code>source</code>文件夹中的 <code>_post</code> 文件夹中多了一个<code>XXX.md</code>的文件，使用Markdown编辑器打开</li></ul><pre><code>---title: hello-world   //在此处添加你的标题。date: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。categories: Exercise   //在此处输入这篇文章的分类。toc: true  ---//在此处输入这篇文章的内容。</code></pre><ul><li>保存后，运行命令<code>hexo g</code>就可以进行渲染了。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><hr><ul><li>完成了以上所有的步骤后，一个基础简单的博客就搭建成功了！</li></ul>]]></content>
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
